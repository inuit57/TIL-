출퇴근길에 git 등에 정리된 기술 문서를 읽어보려고 하고 있습니다. 
작은 것일지라도, 컴퓨터 공학을 전공하며 학교에서 배운 지식일지라도 
보지 않는다면 잊게 되어버리니 말입니다. 



<메모리 구조>
프로그램이 실행되게 되면 CPU는 메모리(RAM)에 프로그램이 사용할 수 있는 공간을 할당해줍니다.
이 메모리 공간은 크게 4부분으로 볼 수 있습니다. 

1) Code 영역 ( 텍스트 영역)
- 우리가 작성한 소스코드가 실행파일로 변경되어서 실행되는 함수,제어문, 상수 등이 이 영역에 올라갑니다. 

2) Data 영역
- 전역 변수, static 변수가 저장되는 영역입니다. 
프로그램이 시작됨과 동시에 생성되고 종료될 때 동시에 사라지게 되는 영역입니다.

3)stack 영역
- 프로그램 내부에서 자동으로 사용하는 임시 메모리 영역입니다.
- 함수 내부에서 사용하는 변수나 함수를 호출할 때 복사한 데이터 값들이 이 영역에 저장되었다가
함수가 종료될 때 동시에 사라지게 됩니다. 
- stack 영역은 아래에 후술할 Heap 영역과 공간을 같이 사용합니다. 
같은 공간을 둘이서 나누어서 점유하는 형태라고 이해하면 됩니다. 

4)Heap 영역
- 프로그래머가 임의로 메모리를 할당/해제할 수 있는 영역입니다. 
- Java에서는 가비지 콜렉터가 자동으로 해제하지만, 다른 언어들의 경우 그렇지 않은 경우도 있으니 
신경써서 메모리 관리를 해주는 것이 중요합니다. 
(프로그램이 종료될 경우, 당연히 잡아두었던 메모리가 해제되지만 계속해서 오랫동안 동작해야하는 경우 해제하지 않는다면 문제가 생길 수 있습니다.)
- 런타임시에 크기가 결정되며 런타임 동안 동적할당을 통해서 생성됩니다. 

Heap과 stack은 같은 메모리 공간을 공유합니다. 
Heap이 메모리 위쪽 주소부터 할당된다면 stack은 메모리 제일 하단 주소부터 할당되며
서로가 가지고 있는 영역을 침범하는 일이 발생할 수 있는데 이런 경우를 Heap overflow, stack overflow라고 칭합니다. 


자료출처 : https://jinshine.github.io/2018/05/17/%EC%BB%B4%ED%93%A8%ED%84%B0%20%EA%B8%B0%EC%B4%88/%EB%A9%94%EB%AA%A8%EB%A6%AC%EA%B5%AC%EC%A1%B0/
